public class Threads extends Thread {

    int[][] matrizC;
    int ID, size, tamanho, contAlive;

    public Threads(int indice, int threads, int tamMat) {
        this.ID = indice;
        this.size = threads;
        this.tamanho = tamMat;
        this.contAlive = 0;
    }

    @Override
    public void run() {
        StartGeneration(Dividir(size), ID);
    }

    private void StartGeneration(int n, int id) {
        matrizC = new int[n][tamanho];
        int l = n * (id + 1);
        n = n * id;
        for (int i = n; i < l; i++) {
            for (int j = 0; j < tamanho; j++) {
                //Primeira linha
                if (i == 0) {
                    //PrimeiraLinha && primeira coluna
                    if (j == 0) {
                        //direita
                        if (JogoVida.matrizA[i][j + 1] == 1) {
                            contAlive++;
                        }
                        //direita baixo
                        if (JogoVida.matrizA[i + 1][j + 1] == 1) {
                            contAlive++;
                        }
                        //baixo
                        if (JogoVida.matrizA[i + 1][j] == 1) {
                            contAlive++;
                        }
                        //Primeira Linha && ultima Coluna
                    } else if (j == tamanho - 1) {
                        //esquerda
                        if (JogoVida.matrizA[i][j - 1] == 1) {
                            contAlive++;
                        }
                        //esquerda Baixo
                        if (JogoVida.matrizA[i + 1][j - 1] == 1) {
                            contAlive++;
                        }
                        //baixo
                        if (JogoVida.matrizA[i + 1][j] == 1) {
                            contAlive++;
                        }
                        //primeira linha !primeiraColuna && !ultimaColuna
                    } else {
                        //esquerda
                        if (JogoVida.matrizA[i][j - 1] == 1) {
                            contAlive++;
                        }
                        //direita
                        if (JogoVida.matrizA[i][j + 1] == 1) {
                            contAlive++;
                        }
                        //BaixoEsquerda
                        if (JogoVida.matrizA[i + 1][j - 1] == 1) {
                            contAlive++;
                        }
                        //Baixo
                        if (JogoVida.matrizA[i + 1][j] == 1) {
                            contAlive++;
                        }
                        //BaixoDireita
                        if (JogoVida.matrizA[i + 1][j + 1] == 1) {
                            contAlive++;
                        }
                    }
                    //ultima linha
                } else if (i == tamanho - 1) {
                    //UltimaLinha && Primeira coluna
                    if (j == 0) {
                        //cima
                        if (JogoVida.matrizA[i - 1][j] == 1) {
                            contAlive++;
                        }
                        //cimaDireita
                        if (JogoVida.matrizA[i - 1][j + 1] == 1) {
                            contAlive++;
                        }
                        //Direita
                        if (JogoVida.matrizA[i][j + 1] == 1) {
                            contAlive++;
                        }
                        //UltimaLinha && ultima coluna
                    } else if (j == tamanho - 1) {
                        //cima
                        if (JogoVida.matrizA[i - 1][j] == 1) {
                            contAlive++;
                        }
                        //cimaEsquerda
                        if (JogoVida.matrizA[i - 1][j - 1] == 1) {
                            contAlive++;
                        }
                        //esquerda
                        if (JogoVida.matrizA[i][j - 1] == 1) {
                            contAlive++;
                        }
                    } //ultima linha && !primeiraColuna && !ultimaColuna
                    else {
                        //Esquerda
                        if (JogoVida.matrizA[i][j - 1] == 1) {
                            contAlive++;
                        }
                        //Direita
                        if (JogoVida.matrizA[i][j + 1] == 1) {
                            contAlive++;
                        }
                        //Cima
                        if (JogoVida.matrizA[i - 1][j] == 1) {
                            contAlive++;
                        }
                        //CimaEsquerda
                        if (JogoVida.matrizA[i - 1][j - 1] == 1) {
                            contAlive++;
                        }
                        //CimaDireita
                        if (JogoVida.matrizA[i - 1][j + 1] == 1) {
                            contAlive++;
                        }
                    }
                } //linhas do meio, aqui teram 3 formas diferente j == 0, j == m - 1, outros
                else //meio && primeiraColuna
                {
                    if (j == 0) {
                        //cima
                        if (JogoVida.matrizA[i - 1][j] == 1) {
                            contAlive++;
                        }
                        //cimaDireita
                        if (JogoVida.matrizA[i - 1][j + 1] == 1) {
                            contAlive++;
                        }
                        //Direita
                        if (JogoVida.matrizA[i][j + 1] == 1) {
                            contAlive++;
                        }
                        //Baixo
                        if (JogoVida.matrizA[i + 1][j] == 1) {
                            contAlive++;
                        }
                        //BaixoDireita
                        if (JogoVida.matrizA[i + 1][j + 1] == 1) {
                            contAlive++;
                        }
                    } //Meio && Ultima Coluna
                    else if (j == tamanho - 1) {
                        //cima
                        if (JogoVida.matrizA[i - 1][j] == 1) {
                            contAlive++;
                        }
                        //cimaEsquerda
                        if (JogoVida.matrizA[i - 1][j - 1] == 1) {
                            contAlive++;
                        }
                        //Esquerda
                        if (JogoVida.matrizA[i][j - 1] == 1) {
                            contAlive++;
                        }
                        //Baixo
                        if (JogoVida.matrizA[i + 1][j] == 1) {
                            contAlive++;
                        }
                        //BaixoEsquerda
                        if (JogoVida.matrizA[i + 1][j - 1] == 1) {
                            contAlive++;
                        }
                    } //Meio && !primeiraColuna && !ultimaColuna
                    else {
                        //Cima
                        if (JogoVida.matrizA[i - 1][j] == 1) {
                            contAlive++;
                        }
                        //CimaEsquerda
                        if (JogoVida.matrizA[i - 1][j - 1] == 1) {
                            contAlive++;
                        }
                        //CimaDireita
                        if (JogoVida.matrizA[i - 1][j + 1] == 1) {
                            contAlive++;
                        }
                        //Esquerda
                        if (JogoVida.matrizA[i][j - 1] == 1) {
                            contAlive++;
                        }
                        //Direita
                        if (JogoVida.matrizA[i][j + 1] == 1) {
                            contAlive++;
                        }
                        //Baixo
                        if (JogoVida.matrizA[i + 1][j] == 1) {
                            contAlive++;
                        }
                        //BaixoEsquerda
                        if (JogoVida.matrizA[i + 1][j - 1] == 1) {
                            contAlive++;
                        }
                        //BaixoDireita
                        if (JogoVida.matrizA[i + 1][j + 1] == 1) {
                            contAlive++;
                        }
                    }
                }
                //validar o resultado e passar pra matrizB
                /*
                 - Se a celula esta VIVA e tem menos de 2 ou mais de 3 vizinhos vivos ela MORRE.
                 - Uma celula VIVA, adjacente a 2 ou 3 celulas vivas permanece VIVA.
                 - Uma celula MORTA, adjacente a 2 ou 3 celulas vivas VIVE.
                 - Se a celula esta MORTA e tem menos de 2 ou mais de 3 vizinhos vivos ela continua MORTA.
                 */
                //validacoes de viva
                if (JogoVida.matrizA[i][j] == 1) {
                    if (contAlive < 2 || contAlive > 3) {
                        matrizC[i - (ID * n)][j] = 0;
                    } else if (contAlive == 2 || contAlive == 3) {
                        matrizC[i - (ID * n)][j] = 1;
                    }
                } //validacoes de morta
                else if (contAlive == 3) {
                    matrizC[i - (ID * n)][j] = 1;
                } else {
                    matrizC[i - (ID * n)][j] = 0;
                }
                contAlive = 0;
            }
        }
        Concat(matrizC, n, l);
        JogoVida.lockContador.countDown();
        if (!JogoVida.lockContador.equals(0)) {
            try {
                JogoVida.lockContador.await();
            } catch (InterruptedException e) {
                System.out.println("Thread interrompida");
            }
        }
        if (ID == 0) {
            JogoVida.matrizA = JogoVida.matrizB;
            JogoVida.matrizB = new int[tamanho][tamanho];
        }
    }

    private void Concat(int[][] matC, int n, int l) {
        for (int i = n; i < l; i++) {
            for (int j = 0; j < tamanho; j++) {
                JogoVida.matrizB[i][j] = matC[i - (ID * n)][j];
            }
        }
    }

    private int Dividir(int n) {
        return ((int) tamanho / n);
    }
}
